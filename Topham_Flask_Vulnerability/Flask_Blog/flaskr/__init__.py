import os

from flask import Flask
from flask import render_template_string
from flask import render_template
from flask import request

def create_app(test_config=None):
    """Create and configure an instance of the Flask application."""
    app = Flask(__name__, instance_relative_config=True)
    app.config.from_mapping(
        # a default secret that should be overridden by instance config
        SECRET_KEY="dev",
        # store the database in the instance folder
        DATABASE=os.path.join(app.instance_path, "flaskr.sqlite"),
    )

    if test_config is None:
        # load the instance config, if it exists, when not testing
        app.config.from_pyfile("config.py", silent=True)
    else:
        # load the test config if passed in
        app.config.update(test_config)

    # ensure the instance folder exists
    try:
        os.makedirs(app.instance_path)
    except OSError:
        pass


    @app.route('/create')
    def hello_xss():
	    name = "Welcome your user ID is 12 "
	   # template = 'create' # 'unsafe' file extension... totally legit
	    if request.args.get('name'):
		    name = request.args.get('name')
	    return render_template("blog/create.html", name=name)
    
    @app.route('/secret')
    def hello_ssti():
	    person = {'name':"world", 'secret':"UGhldmJoZj8gYWl2ZnZoei5wYnovcG5lcnJlZg=="}
	    if request.args.get('name'):
	    	person['name'] = request.args.get('name')
	    template = '''<h2>Hello %s!</h2>''' % person['name']
	    return render_template_string(template, person=person)

    def get_user_file(f_name):
	    with open(f_name) as f:
		    return f.readlines()

    app.jinja_env.globals['get_user_file'] = get_user_file # Allows for use in Jinja2 templates
    ## End of hack

    # register the database commands
    from flaskr import db

    db.init_app(app)

    # apply the blueprints to the app
    from flaskr import auth, blog

    app.register_blueprint(auth.bp)
    app.register_blueprint(blog.bp)

    # make url_for('index') == url_for('blog.index')
    # in another app, you might define a separate main index here with
    # app.route, while giving the blog blueprint a url_prefix, but for
    # the tutorial the blog will be the main index
    app.add_url_rule("/", endpoint="index")


    return app

    api_manager = Api(app)
    api_manager.add_resource(allyall, '/', endpoint='all')


